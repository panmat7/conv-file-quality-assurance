using AvaloniaDraft.Helpers;

namespace UnitTests.HelperTest;

//Tests mostly generated by ChatGPT (I was too lazy)
[TestFixture]
public class TempFileTest
{
    private byte[] testData;
    private string testExtension;
    private string tempFilePath;

    [SetUp]
    public void Setup()
    {
        testData = new byte[] { 1, 2, 3, 4, 5 }; // Sample data
        testExtension = "txt"; // Example extension
    }

    [Test]
    public void CreateTemporaryFile_ShouldCreateFileWithCorrectExtension()
    {
        tempFilePath = TempFiles.CreateTemporaryFile(testData, testExtension);
        Assert.That(tempFilePath, Is.Not.Null);

        // Check file exists
        Assert.That(File.Exists(tempFilePath), Is.True, "Temp file should exist.");

        // Check extension
        Assert.That(Path.GetExtension(tempFilePath), Is.EqualTo($".{testExtension}"), "File should have the correct extension.");
    }

    [Test]
    public void CreateTemporaryFile_ShouldWriteCorrectData()
    {
        tempFilePath = TempFiles.CreateTemporaryFile(testData, testExtension);
        Assert.That(tempFilePath, Is.Not.Null);

        byte[] fileContents = File.ReadAllBytes(tempFilePath);

        // Ensure data matches
        Assert.That(fileContents, Is.EqualTo(testData), "File contents should match the original data.");
    }

    [Test]
    public void CreateTemporaryFile_CorrectDataNoExtension()
    {
        tempFilePath = TempFiles.CreateTemporaryFile(testData);
        Assert.That(tempFilePath, Is.Not.Null);

        Assert.That(Path.GetExtension(tempFilePath), Is.EqualTo(".temp"), "File should have the correct extension.");
    }
    
    [Test]
    public void DeleteTemporaryFile_ShouldRemoveFile()
    {
        tempFilePath = TempFiles.CreateTemporaryFile(testData, testExtension);
        Assert.Multiple(() =>
        {
            Assert.That(tempFilePath, Is.Not.Null);

            // Ensure file exists before deletion
            Assert.That(File.Exists(tempFilePath), Is.True, "File should exist before deletion.");
        });

        TempFiles.DeleteTemporaryFile(tempFilePath);

        // Ensure file no longer exists
        Assert.That(File.Exists(tempFilePath), Is.False, "File should not exist after deletion.");
    }

    [TearDown]
    public void Cleanup()
    {
        // Ensure any leftover temp file is deleted
        if (!string.IsNullOrEmpty(tempFilePath) && File.Exists(tempFilePath))
        {
            File.Delete(tempFilePath);
        }
    }
}